/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.reschedule_objects",
    "version": "2.0",
    "description": "Reschedule timescales of the selected tasks/projects.",
    "label": "Reschedule timescales",
    "shortLabel": "Reschedule timescales",
    "paletteLabel": "Reschedule timescales",
    "image": "digitalcrown.arrow.counterclockwise"
}*/
(() => {
    const preferences = new Preferences();

    const devPlugin = PlugIn.find('org.0x3f.libdev');

    if (devPlugin === null) {
        throw new Error('Dev library plugin not installed.');
    }

    const libdev = devPlugin.library('libdev');

    const FIELD_DATE       = 'date';
    const FIELD_TIMESCALES = 'timescales';

    const PREF_LAST_SELECTED_TIMESCALE = 'lastSelectedTimescale';

    const TIMESCALE_MORNING   = 'morning';
    const TIMESCALE_NOON      = 'noon';
    const TIMESCALE_AFTERNOON = 'afternoon';
    const TIMESCALE_EVENING   = 'evening';
    const TIMESCALE_DAYTIME   = 'daytime';
    const TIMESCALE_WHOLE_DAY = 'whole_day';

    const TIMESCALES = {
        TIMESCALE_MORNING:   { from: '9:00 AM',  to: '12:00 PM' },
        TIMESCALE_NOON:      { from: '12:00 PM', to: '14:00' },
        TIMESCALE_AFTERNOON: { from: '14:00',    to: '18:30' },
        TIMESCALE_EVENING:   { from: '18:30',    to: '23:00' },
        TIMESCALE_DAYTIME:   { from: '9:00 AM',  to: '18:30' },
        TIMESCALE_WHOLE_DAY: { from: '9:00 AM',  to: '23:00' },
    };

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            const form = new Form();

            const defaultDate = new Date;
            defaultDate.setHours(0, 0, 0, 0);

            const dateInput = new Form.Field.Date(FIELD_DATE, 'Date', defaultDate);

            form.addField(dateInput);

            let timescales = [
                'Morning',
                'Noon',
                'Afternoon',
                'Evening',
                'Daytime',
                'Whole Day',
            ];

            timescales = timescales.map((item, index) => {
                return item + ' (' + Object.values(TIMESCALES)[index].from + ' - ' + Object.values(TIMESCALES)[index].to + ')';
            });

            const lastSelectedTimescale = libdev.getString(preferences, PREF_LAST_SELECTED_TIMESCALE, Object.keys(TIMESCALES)[0]);

            const timescaleOption = new Form.Field.Option(
                FIELD_TIMESCALES,
                'Timescale',
                Object.keys(TIMESCALES),
                timescales,
                lastSelectedTimescale
            );

            form.addField(timescaleOption);

            form.validate = function (formObject) { return true; };

            const formPromise = form.show('Reschedule Timescales', 'Arrange');

            formPromise.then((formObject) => {
                const date      = formObject.values[FIELD_DATE];
                const timescale = formObject.values[FIELD_TIMESCALES];

                selection.allObjects.forEach((object) => {
                    if ((!(object instanceof Task) && !(object instanceof Project)) || object.completed === true) {
                        return;
                    }

                    const newDeferDate = new Date(
                        date.toDateString() + ' ' + TIMESCALES[timescale].from
                    );
                    const newDueDate = new Date(
                        date.toDateString() + ' ' + TIMESCALES[timescale].to
                    );

                    object.deferDate = newDeferDate;
                    object.dueDate   = newDueDate;
                });

                preferences.write(PREF_LAST_SELECTED_TIMESCALE, timescale);
            });
        } catch (err) {
            new Alert(err.name, err.message).show();
        }
    });

    action.validate = function (selection, sender) {
        return selection.tasks.some(task => task.completed === false) || selection.projects.some(project => project.completed === false);
    };

    return action;
})();
