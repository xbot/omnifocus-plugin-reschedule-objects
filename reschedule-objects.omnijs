/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.reschedule_objects",
    "version": "3.0",
    "description": "Reschedule timescales of the selected tasks/projects.",
    "label": "Reschedule timescales",
    "shortLabel": "Reschedule timescales",
    "paletteLabel": "Reschedule timescales",
    "image": "digitalcrown.arrow.counterclockwise"
}*/
(() => {
    const preferences = new Preferences();

    const devPlugin = PlugIn.find('org.0x3f.libdev');

    if (devPlugin === null) {
        throw new Error('Dev library plugin not installed.');
    }

    const libdev = devPlugin.library('libdev');

    const FIELD_DATE       = 'date';
    const FIELD_TIMESCALES = 'timescales';

    const FIELD_INDEX_DATE       = 0;
    const FIELD_INDEX_TIMESCALES = 1;

    const PREF_LAST_SELECTED_TIMESCALE = 'lastSelectedTimescale';

    const TIMESCALE_MORNING   = 'morning';
    const TIMESCALE_NOON      = 'noon';
    const TIMESCALE_AFTERNOON = 'afternoon';
    const TIMESCALE_EVENING   = 'evening';
    const TIMESCALE_DAYTIME   = 'daytime';
    const TIMESCALE_WHOLE_DAY = 'whole_day';

    const TIMESCALES = {
        morning:   { from: '9:00 AM',  to: '12:00 PM' },
        noon:      { from: '12:00 PM', to: '14:00' },
        afternoon: { from: '14:00',    to: '18:30' },
        evening:   { from: '18:30',    to: '23:00' },
        daytime:   { from: '9:00 AM',  to: '18:30' },
        whole_day: { from: '9:00 AM',  to: '23:00' },
    };

    function get_timescale_keys() {
        const timescaleKeys = Object.keys(TIMESCALES);

        timescaleKeys.push('none');

        return timescaleKeys;
    }

    function get_timescale_labels() {
        let timescaleLabels = [
            'Morning',
            'Noon',
            'Afternoon',
            'Evening',
            'Daytime',
            'Whole Day',
        ];

        timescaleLabels = timescaleLabels.map((item, index) => {
            return item + ' (' + Object.values(TIMESCALES)[index].from + ' - ' + Object.values(TIMESCALES)[index].to + ')';
        });

        timescaleLabels.push('None');

        return timescaleLabels;
    }

    function add_timescale_options_field(form, initVal) {
        let timescaleKeys = Object.keys(TIMESCALES);

        timescaleKeys.push('none');

        const timescaleOption = new Form.Field.MultipleOptions(
            FIELD_TIMESCALES,
            'Timescale',
            timescaleKeys,
            get_timescale_labels(),
            initVal
        );

        form.addField(timescaleOption, FIELD_INDEX_TIMESCALES);
    }

    let tmpPreviousTimescaleArr = null;

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            const form = new Form();

            const defaultDate = new Date;
            defaultDate.setHours(0, 0, 0, 0);

            const dateInput = new Form.Field.Date(FIELD_DATE, 'Date', defaultDate);

            form.addField(dateInput, FIELD_INDEX_DATE);

            const timescaleKeys = get_timescale_keys();

            let lastSelectedTimescaleArr = [libdev.getString(preferences, PREF_LAST_SELECTED_TIMESCALE)];

            if (!lastSelectedTimescaleArr || !timescaleKeys.includes(lastSelectedTimescaleArr[0])) {
                lastSelectedTimescaleArr = timescaleKeys.slice(0, 1);
            }

            add_timescale_options_field(form, lastSelectedTimescaleArr);

            tmpPreviousTimescaleArr = lastSelectedTimescaleArr;

            form.validate = function (formObject) {
                const selectedTimescales = formObject.values[FIELD_TIMESCALES];

                if (!selectedTimescales) {
                    add_timescale_options_field(form, tmpPreviousTimescaleArr);
                }

                if (selectedTimescales.length !== 1) {
                    formObject.removeField(formObject.fields[FIELD_INDEX_TIMESCALES]);

                    if (tmpPreviousTimescaleArr) {
                        tmpPreviousTimescaleArr = selectedTimescales.filter(item => item != tmpPreviousTimescaleArr[0]);
                    }

                    return false;
                }

                return true;
            };

            const formPromise = form.show('Reschedule Timescales', 'Arrange');

            formPromise.then((formObject) => {
                const date      = formObject.values[FIELD_DATE];
                const timescale = formObject.values[FIELD_TIMESCALES][0];

                selection.allObjects.forEach((object) => {
                    if ((!(object instanceof Task) && !(object instanceof Project)) || object.completed === true) {
                        return;
                    }

                    if (timescale != 'none') {
                        object.deferDate = new Date(
                            date.toDateString() + ' ' + TIMESCALES[timescale].from
                        );

                        object.dueDate = new Date(
                            date.toDateString() + ' ' + TIMESCALES[timescale].to
                        );
                    } else {
                        object.deferDate = null;
                        object.dueDate   = null;
                    }
                });

                preferences.write(PREF_LAST_SELECTED_TIMESCALE, timescale);
            });
        } catch (err) {
            new Alert(err.name, err.message).show();
        }
    });

    action.validate = function (selection, sender) {
        return selection.tasks.some(task => task.completed === false) || selection.projects.some(project => project.completed === false);
    };

    return action;
})();
